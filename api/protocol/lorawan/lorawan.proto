// Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

syntax = "proto3";

import "google/protobuf/empty.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

package lorawan;

option go_package = "github.com/TheThingsNetwork/ttn/api/protocol/lorawan";

enum Class {
  A = 0;
  B = 1;
  C = 2;
}

message DeviceIdentifier {
  // The AppEUI is a unique, 8 byte identifier for the application a device belongs to.
  bytes  app_eui  = 1 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppEUI"];
  // The DevEUI is a unique, 8 byte identifier for the device.
  bytes  dev_eui  = 2 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevEUI"];
}

message Device {
  // The AppEUI is a unique, 8 byte identifier for the application a device belongs to.
  bytes  app_eui     = 1 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppEUI"];
  // The DevEUI is a unique, 8 byte identifier for the device.
  bytes  dev_eui     = 2 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevEUI"];
  // The AppID is a unique identifier for the application a device belongs to. It can contain lowercase letters, numbers, - and _.
  string app_id      = 3;
  // The DevID is a unique identifier for the device. It can contain lowercase letters, numbers, - and _.
  string dev_id      = 4;
  // The DevAddr is a dynamic, 4 byte session address for the device.
  bytes  dev_addr    = 5 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevAddr"];
  // The NwkSKey is a 16 byte session key that is known by the device and the network. It is used for routing and MAC related functionality.
  // This key is negotiated during the OTAA join procedure, or statically configured using ABP.
  bytes  nwk_s_key   = 6 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.NwkSKey"];
  // The AppSKey is a 16 byte session key that is known by the device and the application. It is used for payload encryption.
  // This key is negotiated during the OTAA join procedure, or statically configured using ABP.
  bytes  app_s_key   = 7 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppSKey"];
  // The AppKey is a 16 byte static key that is known by the device and the application. It is used for negotiating session keys (OTAA).
  bytes  app_key     = 8 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppKey"];
  // FCntUp is the uplink frame counter for a device session.
  uint32 f_cnt_up    = 9;
  // FCntDown is the downlink frame counter for a device session.
  uint32 f_cnt_down  = 10;

  // The DisableFCntCheck option disables the frame counter check. Disabling this makes the device vulnerable to replay attacks, but makes ABP slightly easier.
  bool   disable_f_cnt_check = 11;
  // The Uses32BitFCnt option indicates that the device keeps track of full 32 bit frame counters. As only the 16 lsb are actually transmitted, the 16 msb will have to be inferred.
  bool   uses32_bit_f_cnt    = 12;
  // The ActivationContstraints are used to allocate a device address for a device (comma-separated).
  // There are different prefixes for `otaa`, `abp`, `world`, `local`, `private`, `testing`.
  string activation_constraints = 13;
  // The PreferredGateways option configures which gateways should be preferred for downlink to this device. If the list
  // is empty, or none of the gateways is available for downlink, the Broker will determine the downlink gateway. This
  // option is not used for join-accept messages.
  repeated string preferred_gateways = 14;

  FrequencyPlan frequency_plan = 16;

  // RX2 Data Rate (if not using the default value defined in the frequency plan)
  string rx2_data_rate = 17;
  // RX2 Frequency in Hz (if not using the default value defined in the frequency plan; currently not used)
	uint64 rx2_frequency = 18;

  // Device Class
  Class  class = 15;

  // When the device was last seen (Unix nanoseconds)
  int64  last_seen = 21;
}

service DeviceManager {
  rpc GetDevice(DeviceIdentifier) returns (Device);
  rpc SetDevice(Device) returns (google.protobuf.Empty);
  rpc DeleteDevice(DeviceIdentifier) returns (google.protobuf.Empty);
}

enum Modulation {
  LORA = 0;
  FSK  = 1;
}

message Metadata {
  Modulation  modulation   = 11;
  // LoRa data rate - SF{spreadingfactor}BW{bandwidth}
  string      data_rate    = 12;
  // FSK bit rate in bit/s
  uint32      bit_rate     = 13;
  // LoRa coding rate
  string      coding_rate  = 14;

  // Store the full 32 bit FCnt (deprecated; do not use)
  uint32      f_cnt = 15;

  FrequencyPlan frequency_plan = 16;
}

message TxConfiguration {
  Modulation  modulation   = 11;
  // LoRa data rate - SF{spreadingfactor}BW{bandwidth}
  string      data_rate    = 12;
  // FSK bit rate in bit/s
  uint32      bit_rate     = 13;
  // LoRa coding rate
  string      coding_rate  = 14;

  // Store the full 32 bit FCnt (deprecated; do not use)
  uint32      f_cnt = 15;
}

message ActivationMetadata {
  bytes app_eui    = 1 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppEUI"];
  bytes dev_eui    = 2 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevEUI"];
  bytes dev_addr   = 3 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevAddr"];
  bytes nwk_s_key  = 4 [(gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.NwkSKey"];

  uint32 rx1_dr_offset    = 11;
  uint32 rx2_dr           = 12;
  uint32 rx_delay         = 13;
  CFList cf_list          = 14;
  FrequencyPlan frequency_plan = 15;
}

enum FrequencyPlan {
  EU_863_870 = 0;

  US_902_928 = 1;

  CN_779_787 = 2;

  EU_433     = 3;

  AU_915_928 = 4;

  CN_470_510 = 5;

  AS_923     = 6;
  AS_920_923 = 61;
  AS_923_925 = 62;

  KR_920_923 = 7;
}

message Message {
  MHDR  m_hdr = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  bytes mic   = 2;

  oneof Payload {
    MACPayload          mac_payload           = 3;
    JoinRequestPayload  join_request_payload  = 4;
    JoinAcceptPayload   join_accept_payload   = 5;
  }
}

enum Major {
  LORAWAN_R1 = 0;
}

enum MType {
  JOIN_REQUEST      = 0;
  JOIN_ACCEPT       = 1;
  UNCONFIRMED_UP    = 2;
  UNCONFIRMED_DOWN  = 3;
  CONFIRMED_UP      = 4;
  CONFIRMED_DOWN    = 5;
}

message MHDR {
  MType m_type  = 1;
  Major major   = 2;
}

message MACPayload {
  FHDR  f_hdr       = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  int32 f_port      = 2;
  bytes frm_payload = 3;
}

message FHDR {
  bytes dev_addr  = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevAddr"];
  FCtrl f_ctrl    = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  uint32 f_cnt    = 3;
  repeated MACCommand f_opts = 4 [(gogoproto.nullable) = false];
}

message FCtrl {
  bool    adr         = 1;
  bool    adr_ack_req = 2;
  bool    ack         = 3;
  bool    f_pending   = 4;
}

message MACCommand {
  uint32 cid     = 1;
  bytes  payload = 2;
}

message JoinRequestPayload {
  bytes app_eui   = 1 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppEUI"];
  bytes dev_eui   = 2 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevEUI"];
  bytes dev_nonce = 3 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevNonce"];
}

message JoinAcceptPayload {
  bytes       encrypted   = 1;
  bytes       app_nonce   = 2 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.AppNonce"];
  bytes       net_id      = 3 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.NetID"];
  bytes       dev_addr    = 4 [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/TheThingsNetwork/ttn/core/types.DevAddr"];
  DLSettings  dl_settings = 5 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  uint32      rx_delay    = 6;
  CFList      cf_list     = 7;
}

message DLSettings {
  uint32 rx1_dr_offset = 1;
  uint32 rx2_dr = 2;
}

message CFList {
  repeated uint32 freq = 1;
}
